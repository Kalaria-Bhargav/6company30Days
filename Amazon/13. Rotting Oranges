class Solution {
public:
    
    int orangesRotting(vector<vector<int>>& grid) {
    int dx[] = {-1,1,0,0};
    int dy[] = {0,0,-1,1};
        
        
    int cnt = 0;
        queue<pair<int,int>>q;
    int n = grid.size();
    int m = grid[0].size();
    bool vis[n+1][m+1];
    memset(vis, false, sizeof vis);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j] == 2 ){
                vis[i][j] = true;
                q.push({i,j});
            }
        }
    }
   
        
    while(!q.empty()){
        int sz = q.size();
        bool t = false;
        for(int k=0;k<sz;k++){
            int x = q.front().first;
            int y = q.front().second;
            
            q.pop();
            
            for(int i=0;i<4;i++){
                int newx = x + dx[i];
                int newy = y + dy[i];
                
                if(newx >=0 && newx < n && newy >= 0 && newy < m && grid[newx][newy] == 1 && vis[newx][newy] == false){
                    vis[newx][newy] = true;
                    q.push({newx,newy});
                    t = true;
                }
            }
        }
        if(t)
            cnt++;
    }
        
         for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j] == 1 && !vis[i][j] ){
                return -1;
            }
        }
    }
        return cnt;
    }
};
